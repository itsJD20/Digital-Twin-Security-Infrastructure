ditto {
  http {
    hostname = "localhost"
    port = 8130 # for local development
  }

  metrics.prometheus.port = 9013

  search {
    operator-metrics {
      enabled = true
      scrape-interval = 1m
      custom-metrics {
        my_awesome_things {
          enabled = false
          scrape-interval = 1m # overwrite scrape interval, run each minute
          namespaces = [
            "org.eclipse.ditto.foo"
            "org.eclipse.ditto.bar"
          ]
          # with an empty filter query, counting all existing things
          filter = "eq(attributes/awesome,true)"
          tags {
            category = "bumlux"
          }
        }
      }
      custom-aggregation-metrics {
        online_status {
          enabled = true
          scrape-interval = 1m # override scrape interval, run every 20 minute
          namespaces = [
            "org.eclipse.ditto"
          ]
          filter = "gt(features/ConnectionStatus/properties/status/readyUntil/,time:now)"
          group-by {
            "location" = "attributes/Info/location"
            "isGateway" = "attributes/Info/gateway"
          }
          tags {
            "hardcoded-tag" = "value"
            "location" = "{{ group-by:location | fn:default('missing location') }}"
            "isGateway" = "{{ group-by:isGateway }}"
          }
        }
      }
    }
  }
}

pekko {
  management.http.port = 25570

  remote {
    # for debugging purpose
    watch-failure-detector {
      expected-response-after = 120s
    }

    artery {
      canonical.hostname = "127.0.0.1"
      canonical.port = 2557
      canonical.port = ${?REMOTE_PORT}
      bind.bind-timeout = 6s
      bind.bind-timeout = ${?ARTERY_BIND_TIMEOUT}
    }
  }

  cluster {
    # for debugging purpose
    failure-detector {
      expected-response-after = 120s
      threshold = 16.0
      acceptable-heartbeat-pause = 120s
    }

    seed-nodes = [
      "pekko://ditto-cluster@127.0.0.1:2552", # port of the policies service to join in cluster
      "pekko://ditto-cluster@"${pekko.remote.artery.canonical.hostname}":"${pekko.remote.artery.canonical.port}
    ]
  }

}
