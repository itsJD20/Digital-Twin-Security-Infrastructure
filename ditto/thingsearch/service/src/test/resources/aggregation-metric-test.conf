ditto {
  mapping-strategy.implementation = "org.eclipse.ditto.thingsearch.api.ThingSearchMappingStrategies"
  limits {
    # limiations for the "search" service
    search {
      default-page-size = 25
      # the allowed maximum page size limit - e.g. specified when doing a search via HTTP:
      # /api/1/search/things?filter=...&option=limit(0,200)
      max-page-size = 200
    }
  }
  mongodb {
    uri = "mongodb://localhost:27017/test"
    pool {
      max-size = 100
      max-wait-time = 30s
      max-wait-queue-size = 500000
    }
  }
  search {
    query {
      persistence {
        readPreference = "nearest"
      }
    }
    query-criteria-validator = "org.eclipse.ditto.thingsearch.service.persistence.query.validation.DefaultQueryCriteriaValidator"
    search-update-mapper.implementation = "org.eclipse.ditto.thingsearch.service.persistence.write.streaming.DefaultSearchUpdateMapper"
    search-update-observer.implementation = "org.eclipse.ditto.thingsearch.service.updater.actors.DefaultSearchUpdateObserver"

    operator-metrics {
      enabled = true
      enabled = ${?THINGS_SEARCH_OPERATOR_METRICS_ENABLED}
      # by default, execute "count" metrics once every 15 minutes:
      scrape-interval = 15m
      scrape-interval = ${?THINGS_SEARCH_OPERATOR_METRICS_SCRAPE_INTERVAL}
      custom-metrics {
      }
      custom-aggregation-metrics {
        and_lt_gt {
          enabled = true
          scrape-interval = 1m # override scrape interval, run every 20 minute
          namespaces = [
            "org.eclipse.ditto"
          ]
          filter = "and(lt(features/ConnectionStatus/properties/status/readySince,time:now),gt(features/ConnectionStatus/properties/status/readyUntil,time:now))"
          group-by:{
            "location" = "attributes/coffeemaker/location"
          }
          tags: {
            "hardcoded-tag" = "value"
            "location" = "{{ group-by:location | fn:default('missing location') }}"
            "online_placeholder" = false
            "expectedResult-1" = 1
            "expectedResult-2" = 1
          }
        }
        or_like_ilike {
          enabled = true
          scrape-interval = 1m # override scrape interval, run every 20 minute
          namespaces = [
            "org.eclipse.ditto"
          ]
          filter = "or(like(attributes/coffeemaker/location,\"Sofi*\"),ilike(attributes/coffeemaker/location,\"immens*\"),ilike(attributes/coffeemaker/location,\"im?ens?\"))"
          group-by:{
            "location" = "attributes/coffeemaker/location"
          }
          tags: {
            "hardcoded-tag" = "value"
            "location" = "{{ group-by:location | fn:default('missing location') }}"
            "online_placeholder" = false
            "expectedResult-1" = 1
            "expectedResult-2" = 1
          }
        }
        exists {
          enabled = true
          scrape-interval = 1m # override scrape interval, run every 20 minute
          namespaces = [
            "org.eclipse.ditto"
          ]
          filter = "exists(attributes/coffeemaker/location)"
          group-by:{
            "location" = "attributes/coffeemaker/location"
          }
          tags: {
            "hardcoded-tag" = "value"
            "location" = "{{ group-by:location | fn:default('missing location') }}"
            "online_placeholder" = false
            "expectedResult-1" = 1
            "expectedResult-2" = 1
            "expectedResult-3" = 1
          }
        }
      }
    }
  }
}