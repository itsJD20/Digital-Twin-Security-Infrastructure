# the MongoDB settings configured here are applied to the Ditto services:
# * things-search
# and following Ditto functionalities:
# * persistence streaming actors: org.eclipse.ditto.internal.utils.persistence.mongo.AbstractPersistenceStreamingActor
# * snapshot streaming actor: org.eclipse.ditto.internal.utils.persistence.mongo.SnapshotStreamingActor
# * persistence operations actors: org.eclipse.ditto.internal.utils.persistence.operations.AbstractPersistenceOperationsActor
# * mongo read journal: org.eclipse.ditto.internal.utils.persistence.mongo.streaming.MongoReadJournal
# * mongo health checks: org.eclipse.ditto.internal.utils.persistence.mongo.MongoHealthChecker
#
# these settings are however NOT APPLIED to the following Ditto services:
# * things (persistence via pekko-persistence)
# * policies (persistence via pekko-persistence)
# * connectivity (persistence via pekko-persistence)
ditto.mongodb {
  hostname = "localhost"
  hostname = ${?MONGO_DB_HOSTNAME}
  port = 27017
  port = ${?MONGO_DB_PORT}
  authentication = ${?MONGO_DB_AUTHENTICATION}
  database = ditto
  database = ${?MONGO_DB_DATABASE}

  # the above keys are not read from Ditto config code, but are only used in the default "uri" here:
  uri = "mongodb://"${?ditto.mongodb.authentication}${ditto.mongodb.hostname}":"${ditto.mongodb.port}"/"${ditto.mongodb.database}
  uri = ${?MONGO_DB_URI}

  maxQueryTime = 60s
  maxQueryTime = ${?MONGO_DB_QUERY_TIMEOUT}

  # whether or not to configure compatibility mode for "DocumentDB" (as replacement for MongoDB)
  documentDb-compatibility-mode = false
  documentDb-compatibility-mode = ${?MONGO_DB_DOCUMENTDB_COMPATIBILITY_MODE}

  options {
    ssl = false
    ssl = ${?MONGO_DB_SSL_ENABLED}

    # read preference is one of: primary, primaryPreferred, secondary, secondaryPreferred, nearest
    readPreference = primary
    readPreference = ${?MONGO_DB_READ_PREFERENCE}

    # read concern is one of: default, local, majority, linearizable, snapshot, available
    readConcern = local
    readConcern = ${?MONGO_DB_READ_CONCERN}

    # write concern is one of: unacknowledged, acknowledged, majority, journaled, w1, w2, w3
    writeConcern = acknowledged
    writeConcern = ${?MONGO_DB_WRITE_CONCERN}

    retryWrites = true
    retryWrites = ${?MONGO_DB_RETRY_WRITES}

    # Determines whether to use AWS IAM roles for authentication with MongoDB.
    # When set to true, MongoDB will use the AWS IAM role credentials.
    useAwsIamRole = false
    useAwsIamRole = ${?MONGO_DB_USE_AWS_IAM_ROLE}

    # Specifies the AWS region - if this is an empty string, the AWS SDK will attempt to identify the
    # region automatically based on the environment and eventually EC2 instances
    awsRegion = ""
    awsRegion = ${?MONGO_DB_AWS_REGION}

    # Specifies the ARN of the AWS IAM Role to be assumed for MongoDB authentication.
    awsRoleArn = ""
    awsRoleArn = ${?MONGO_DB_AWS_ROLE_ARN}

    # Specifies the AWS session name to be used when assuming the IAM role.
    # This value can be customized by setting the MONGO_DB_AWS_SESSION_NAME environment variable.
    # The default session name is "dittoSession".
    awsSessionName = "dittoSession"
    awsSessionName = ${?MONGO_DB_AWS_SESSION_NAME}

    // all options in the "extra-options" are simply added to the MongoDB URI
    // that way any available URI option may be added, even if not explicitly specified in Ditto's mongo config
    extra-uri-options {
      // e.g.:
      // ssl=true
      // sslInvalidHostNameAllowed=true
      // minPoolSize=0
      // maxPoolSize=100
      // ...
    }
  }

  pool {
    minSize = 0
    minSize = ${?MONGO_DB_CONNECTION_MIN_POOL_SIZE}

    maxSize = 100
    maxSize = ${?MONGO_DB_CONNECTION_POOL_SIZE}

    maxIdleTime = -1s
    maxIdleTime = ${?MONGO_DB_CONNECTION_POOL_IDLE_TIME}

    maxWaitTime = 30s
    maxWaitTime = ${?MONGO_DB_CONNECTION_POOL_WAIT_TIME}
  }
}
